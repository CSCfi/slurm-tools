#!/bin/sh

# Print the nodes power values from scontrol show node (CurrentWatts etc.)
# Usage: showpower < -w nodelist | -p partition(s) | -a | -h > [ -S sorting-variable ]
#
# The sinfo command cannot print power values, so we have to use scontrol.

# To enable Slurm power monitoring:
# Several AcctGatherEnergyType types are defined in the slurm.conf manual page.
# RAPL data gathering can be enabled in Slurm by:
# AcctGatherEnergyType=acct_gather_energy/rapl
# AcctGatherNodeFreq=30
# and do an "scontrol reconfig".

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 < -w nodelist | -p partition(s) | -a | -h > [ -S sorting-variable ]
where:
	-a: All nodes in the cluster
	-h: Print help information
	-S: Sort output by this column (e.g. CurrentWatts)
EOF
}

if [[ $# = 0 ]]
then
	echo "ERROR: No arguments given"
	usage
	exit 1
fi

# Default output sorting variable
export sortvar="NodeName"

while getopts "p:w:S:ah" options; do
	case $options in
		p ) 	export nodelist="`sinfo -h -p $OPTARG -O NodeList:`"
			if [[ -z $nodelist ]]
			then
				echo "ERROR: Partition $OPTARG does not exist on this cluster"
				usage
				exit 1
			fi
			;;
		a ) 	export nodelist="`sinfo -h --all -O NodeList:`"
			;;
		w )	export nodelist=$OPTARG ;;
		S )	export sortvar="$OPTARG" ;;
		h|? ) 	usage
			exit 0 ;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
        echo ERROR: Too many command line arguments: $*
        usage
        exit 1
fi

# Sanity check of nodelist
if [[ -z "`sinfo -h -N -n $nodelist -O NodeList:`" ]]
then
	echo "ERROR: Nodelist $nodelist does not exist on this cluster"
	usage
	exit 1
fi

scontrol -o show node $nodelist | awk '
BEGIN {
	# Read environment variables
        sortvar=ENVIRON["sortvar"]
}
{
	# Get the NodeName n from $1
	if (split($1,array,"=") != 2) {
		print "Failed to read NodeName=<name> from field: " $1 " in line:"
		print $0
		exit -1
	}
	if (array[1] != "NodeName") {
		print "Failed to read NodeName from field: " $1 " in line:"
		print $0
		exit -1
	}
	# Set this NodeName to n
	n = array[2]
	for (i=1; i<=NF; i++) {
		# Get variable=value pairs
		if (split($i,array,"=") == 2)
			value[array[1]][n] = array[2]
	}
} END {
	# Check that the sortvar index exists in the value array
	if (sortvar in value) {
		# Print selected variables for all nodes (ascending values)
		PROCINFO["sorted_in"] = "@val_num_asc"
		print "NodeName\tCPUTot\tCPULoad\tCurrentWatts\tAveWatts\tCapWatts\tExtSensorsWatts\tExtSensorsJoules\tExtSensorsTemp"
		for (n in value[sortvar])
			printf("%s\t\t%d\t%.1f\t%.1f\t\t%.1f\t\t%s\t\t%s\t\t%s\t\t\t%s\n",
				value["NodeName"][n],
				value["CPUTot"][n],
				value["CPULoad"][n],
				value["CurrentWatts"][n],
				value["AveWatts"][n],
				value["CapWatts"][n],
				value["ExtSensorsWatts"][n],
				value["ExtSensorsJoules"][n],
				value["ExtSensorsTemp"][n])
	} else {
		print "ERROR: Unknown sorting variable=" sortvar
		PROCINFO["sorted_in"] = "@ind_str_asc"
		printf("Available sorting variables:\n")
		for (i in value) printf("%s ", i)
		print ""
		exit -1
	}
}'
