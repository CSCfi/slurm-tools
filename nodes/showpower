#!/bin/sh

# Print the nodes power values from scontrol show node (CurrentWatts etc.)
# Usage: showpower < -w nodelist | -p partition(s) | -a | -h >
#
# The sinfo command cannot print power values, so we have to use scontrol.

# To enable Slurm power monitoring:
# Several AcctGatherEnergyType types are defined in the slurm.conf manual page.
# RAPL data gathering can be enabled in Slurm by:
# AcctGatherEnergyType=acct_gather_energy/rapl
# AcctGatherNodeFreq=30
# and do an "scontrol reconfig".

# Command usage:
function usage()
{
cat <<EOF
Usage: $0 < -w nodelist | -p partition(s) | -a | -h >
where:
	-a: All nodes in the cluster
	-h: Print help information
EOF
}

if [[ $# = 0 ]]
then
	echo "ERROR: No arguments given"
	usage
	exit -1
fi

while getopts "p:w:ah" options; do
	case $options in
		p ) 	export nodelist="`sinfo -h -p $OPTARG -O NodeList:`"
			if [[ -z $nodelist ]]
			then
				echo "ERROR: Partition $OPTARG does not exist on this cluster"
				usage
				exit 1
			fi
			;;
		a ) 	export nodelist="`sinfo -h --all -O NodeList:`"
			;;
		w )	export nodelist=$OPTARG ;;
		h|? ) 	usage
			exit 1 ;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
        echo ERROR: Too many command line arguments: $*
        usage
        exit 1
fi

# Sanity check of nodelist
if [[ -z "`sinfo -h -N -n $nodelist -O NodeList:`" ]]
then
	echo "ERROR: Nodelist $nodelist does not exist on this cluster"
	usage
	exit -1
fi

scontrol -o show node $nodelist | awk '
{
	# Get the NodeName from $1
	split($1,array,"=")
	n = array[2]
	NodeName[n] = n
	for (i=2; i<=NF; i++) {
		# Get variable=value pairs
		split($i,array,"=")
		value[array[1],n] = array[2]
	}
} END {
	PROCINFO["sorted_in"] = "@ind_str_asc"
	print "Nodename\tCPUTot\tCPULoad\tCurrentWatts\tAveWatts\tCapWatts\tExtSensorsWatts\tExtSensorsJoules\tExtSensorsTemp"
	for (n in NodeName)
		printf("%s\t\t%d\t%.1f\t%.1f\t\t%.1f\t\t%s\t\t%s\t\t%s\t\t\t%s\n",
			NodeName[n],
			value["CPUTot",n],
			value["CPULoad",n],
			value["CurrentWatts",n],
			value["AveWatts",n],
			value["CapWatts",n],
			value["ExtSensorsWatts",n],
			value["ExtSensorsJoules",n],
			value["ExtSensorsTemp",n])
}'
