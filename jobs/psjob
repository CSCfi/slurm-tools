#!/usr/bin/env bash

# Do "ps aux" on a set of nodes belonging to a single job, but exclude system processes.
# Author: Ole.H.Nielsen@fysik.dtu.dk
# Homepage: https://github.com/OleHolmNielsen/Slurm_tools/
# Usage: psjob jobid

# Requires ClusterShell with configuration for parallel commands on Slurm jobs,
# see https://wiki.fysik.dtu.dk/niflheim/SLURM#clustershell
# and https://clustershell.readthedocs.io/en/latest/intro.html

# Possibly configure these variables:
CLUSH="/usr/bin/clush"
PS="/bin/ps"
PSFLAGS="-o pid,state,user,start,nlwp,cputime,%cpu,rssize,command --columns 100"

if test $# -ne 1
then
	echo ERROR. Usage: $0 jobid
	exit -1
fi
# Check that jobid is a number (possibly with _ separating job array_task_id)
if ! [[ ${1} =~ ^[0-9_]+$ ]]
then
        echo "ERROR: <jobid> must be a number or jobid_arraytaskid"
        echo "Usage: $0 <jobid>"
        exit 1
fi

JOBID=$1
# Check if this JOBID can be inquired successfully.
JOBSTATE="`squeue -h -o %T -j $JOBID`"
if test "$?" != "0"
then
	echo Error inquiring about job $JOBID 
	exit 1
fi

# Detect job arrays by counting number of words in JOBSTATE
words=( $JOBSTATE )
if [[ ${#words[@]} > 1 ]]
then
	echo "ERROR: The job $JOBID is a job array with multiple jobs. Please select only one array job."
	exit 1
fi

if test "$JOBSTATE" != "RUNNING"
then
	echo The job $JOBID is not running, it has state=$JOBSTATE
	exit 1
fi

# For an array job, get the individual jobid corresponding to the array job:
REALJOBID=`squeue -h -o %A -j $JOBID`

# Print some job information
if test "$REALJOBID" = "$JOBID"
then
	squeue -O JobID,NodeList,TimeUsed,StartTime -j $JOBID
else
	# For array jobs
	squeue -O JobID,ArrayJobID,ArrayTaskID,NodeList,TimeUsed,StartTime -j $JOBID
fi

# Execute parallel shell on the job nodes:
# The "scontrol listpids" lists all processes belonging to a Slurm job REALJOBID
$CLUSH -bw@sj:$REALJOBID "$PS $PSFLAGS \$(scontrol listpids $REALJOBID | tail -n+3 | awk '{print \$1}') | grep -v ' root    '" 
