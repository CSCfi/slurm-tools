#!/bin/sh

# Slurm batch queue:
# Show the current batch jobs status broken down into userids.
# Can also show per-user or per-group status.

# Author: Ole H. Nielsen, Technical University of Denmark
# E-mail: Ole.H.Nielsen@fysik.dtu.dk


# Command usage:
function usage()
{
cat <<EOF
Usage: $0 [-u username | -g groupname] [-p partition] [-G] [-h]
where:
        -u username: Print only user <username> (do not use with the -g flag)
        -g groupname: Print only users in group <groupname>
	-G: Print only GROUP_TOTAL lines
        -p partition: Print only jobs in partition <partition-list>
        -r: Print additional job Reason columns
        -h: Print this help information
EOF
}

# Set the maximum length of usernames (must be 11 or more to fit *_TOTAL strings)
export maxlength=11
# Set the percentage of MaxJobCount above which we print a warning.
export maxjobpercent=80

#
# Process command arguments
#
export group_totals_only=0
export reason_print=0

while getopts "u:g:p:Grh" options; do
	case $options in
		u ) 	export username=$OPTARG
			echo Select only user $username
			;;
		g ) 	export groupname=$OPTARG
			echo Select only users in group $groupname
			;;
		G ) 	export group_totals_only=1
			echo Select only GROUP_TOTAL lines
			;;
		p ) 	export partition="-p $OPTARG"
			echo Print only jobs in partition $OPTARG
			;;
		r ) 	export reason_print=1
			echo "Print additional job Reason columns (see 'man squeue'):"
			echo "    Priority:   Waiting for resources or higher priority jobs"
			echo "    Dependency: Waiting for a dependent job to complete"
			echo "    CpuLimit:   AssocGrpCpuLimit, AssocGrpCPURunMinutesLimit"
			echo "    Held:       JobHeldUser, JobHeldAdmin"
			;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

if test -n "$username" -a -n "$groupname"
then
	echo ERROR: Do not select both username and groupname
	usage
	exit 1
fi

echo Batch job status at `date`

#
# Print a nodes state summary
#

# Count the nodes and CPUs:
# Output: Nodename cpus partition state
sinfo --noheader -N  $partition -o  "%N %c %P %6t" | awk '
{
	node = $1
	if (hostname[node] != "") next		# Nodes in multiple partitions are counted once only
	hostname[node] = node
	total_node++
	cpus[node] = $2
	total_cpus += cpus[node]
	partition[node] = $3
	s = $4
	gsub("*", "", s)    # Strip "*" from nodename in default partition
	state[node] = s
	nodestates[s] = s
	nodecount[s]++
	cpucount[s] += cpus[node]
} END {
	print " "
	print "Node states summary:"
	format = "%-7s %5d nodes (%d CPUs)\n"
	asort(nodestates)	# Sort nodestates so that "alloc" comes first
	for (i in nodestates) {
		s =  nodestates[i]
		printf(format, s, nodecount[s],  cpucount[s])
	}
	printf(format, "Total", total_node, total_cpus)
}'

#
# Print a job summary
#
export NUMJOBS=`squeue  -h -o "%i" | wc -l`
export MAXJOBCOUNT=`scontrol show config | grep MaxJobCount | awk '{print $3}'`
echo
echo "Job summary: $NUMJOBS jobs total (max=$MAXJOBCOUNT) in all partitions."
# Check if NUMJOBS exceeds 80% of the maximum:
if (( NUMJOBS > maxjobpercent*MAXJOBCOUNT/100 ))
then
	echo "*** WARNING: *** The number of jobs is getting close to the MaxJobCount limit in slurm.conf."
fi

# Print a header
echo | awk '
BEGIN {
	maxlength=ENVIRON["maxlength"]
	reason_print=ENVIRON["reason_print"]
	line="============================="
	print " "
	if (reason_print==0) {
		fmt="%-*.*s %6.6s %6.6s   %6.6s %6.6s  %-8.8s  %s\n"
		printf (fmt, maxlength, maxlength, "", "Running", "", "Idle", "", "", "")
		printf (fmt, maxlength, maxlength, "Username",
			"Jobs", "CPUs", "Jobs", "CPUs", "Group", "Further info")
		printf (fmt, maxlength, maxlength, line,
			line, line, line, line,
			line, line)
	} else {
		# Additional columns for job reasons
		# reasonfmt = "%-*.*s %6s %6s   %6s %6s   %6s %6s   %6s %6s   %6s %6s  %-8s  %s\n"
		reasonfmt="%-*.*s %6.6s %6.6s   %6.6s %6.6s   %6.6s %6.6s   %6.6s %6.6s   %6.6s %6.6s   %6.6s %6.6s  %-8.8s  %s\n"
		printf (reasonfmt, maxlength, maxlength, "", "Running", "", "Idle", "",
			"Priority", "", "Dependency", "", "CpuLimit", "", "Held", "",
			"", "")
		printf (reasonfmt, maxlength, maxlength, "Username",
			"Jobs", "CPUs", "Jobs", "CPUs",
			"Jobs", "CPUs", "Jobs", "CPUs", "Jobs", "CPUs", "Jobs", "CPUs",
			"Group", "Further info")
		printf (reasonfmt, maxlength, maxlength, line,
			line, line, line, line,
			line, line, line, line, line, line, line, line,
			line, line)
	}
}'

# The squeue -o format selects fields we are interested in:
# Userid Account Jobstatus Nodecount CPUcount Partition Reason
squeue $partition --noheader -o "%.8u %.8a %.10T %.6D %.6C %P %r" | awk '
BEGIN {
	uname=ENVIRON["username"]
	gname=ENVIRON["groupname"]
	maxlength=ENVIRON["maxlength"]
	group_totals_only=ENVIRON["group_totals_only"]
	reason_print=ENVIRON["reason_print"]
	# First get the list of group names 
	while ("getent group" | getline ) {
		split($0,b,":")		# Split group line into fields
		groupgid[b[3]] = b[1]	# Group name b[1] of this groupid (b[3])
		groupname[b[1]] = b[1]	# Group name b[1]
	}
	close("getent group")
	# Then get the list of user full names from passwd lines
	while ("getent passwd" | getline ) {
		split($0,b,":")		# Split password line into fields
		username[b[1]] = b[1]	# Username b[1]
		fullname[b[1]] = b[5]	# Full name b[5] of this username (b[1])
		usergroup[b[1]] = groupgid[b[4]]	# Group name of this GID (numeric group id)
	}
	close("getent passwd")
	if (length(uname)>0) {		# Select username
		for (u in username) {
			if (u == uname) userselect=1	# User found
		}
		if (userselect != 1) {
			printf("ERROR: Username %s is not in password file\n", uname)
			errorexit = -1
		}
	}
	if (length(gname)>0) {		# Select groupname
		for (g in groupname) {
			if (g == gname) groupselect=1	# Group found
		}
		if (groupselect != 1) {
			printf("ERROR: Groupname %s is not in group file\n", gname)
			errorexit = -2
		}
	}
	if (errorexit != 0) exit errorexit	# Will jump to END section
}

{
	# Process the job list
	userid=$1
	account=$2
	status=$3
	nnodes=$4
	nprocs=$5
	partition=$6
	reason=$7
	if (userselect > 0 && uname !~ username[userid]) next	# Select specified username only
	userlist[userid] = userid

	if (status == "RUNNING" ) {
		running[userid]++
		totalrun++
		runprocs[userid] += nprocs
		totalrunprocs += nprocs
	} else {
		# PENDING jobs
		idle[userid]++
		idleprocs[userid] += nprocs
		totalidle++
		totalidleprocs += nprocs
		if (reason_print == 1) {
			if (reason == "Dependency") {
				Dependency[userid]++
				Dependency_procs[userid] += nprocs
				totalDependency++
				totalDependency_procs += nprocs
			} else if (reason == "Resources" || reason == "Priority") {
				Priority[userid]++
				Priority_procs[userid] += nprocs
				totalPriority++
				totalPriority_procs += nprocs
			} else if (reason == "AssocGrpCpuLimit" || reason == "AssocGrpCPURunMinutesLimit") {
				CpuLimit[userid]++
				CpuLimit_procs[userid] += nprocs
				totalCpuLimit++
				totalCpuLimit_procs += nprocs
			} else if (reason == "JobHeldUser" || reason == "JobHeldAdmin") {
				Held[userid]++
				Held_procs[userid] += nprocs
				totalHeld++
				totalHeld_procs += nprocs
			}
		}
	}
	
} END {
	if (errorexit != 0) exit errorexit	# Error encountered
	# Output line format string
	fmt = "%-*.*s %6d %6d   %6d %6d  %-8s  %s\n"
	# Additional columns for job reasons
	reasonfmt = "%-*.*s %6d %6d   %6d %6d   %6d %6d   %6d %6d   %6d %6d   %6d %6d  %-8s  %s\n"
	# Future: Piping output to a sorting command 
	# sorting = "env LC_ALL=C sort -r -n -k 3 -k 5 -k 1d"

	for (u in userlist) {
		if (groupselect > 0 && gname !~ usergroup[u]) continue # Select specified groupname only
		totalusers++
		if (group_totals_only==0) {
			if (reason_print == 0)
				printf(fmt, maxlength, maxlength,
				userlist[u], running[u], runprocs[u], idle[u], idleprocs[u],
				usergroup[u], fullname[u])
			else
				printf(reasonfmt, maxlength, maxlength,
				userlist[u], running[u], runprocs[u], idle[u], idleprocs[u],
				Priority[u], Priority_procs[u], Dependency[u], Dependency_procs[u],
				CpuLimit[u], CpuLimit_procs[u], Held[u], Held_procs[u],
				usergroup[u], fullname[u])
		}
		# Accumulate group statistics
		grp = usergroup[u]
		grouplist[grp] = grp
		groupusers[grp]++
		group_running[grp] += running[u]
		group_runprocs[grp] += runprocs[u]
		group_idle[grp] += idle[u]
		group_idleprocs[grp] += idleprocs[u]
		if (reason_print == 1) {
			group_Dependency[grp] += Dependency[u]
			group_Dependency_procs[grp] += Dependency_procs[u]
			group_Priority[grp] += Priority[u]
			group_Priority_procs[grp] += Priority_procs[u]
			group_CpuLimit[grp] += CpuLimit[u]
			group_CpuLimit_procs[grp] += CpuLimit_procs[u]
			group_Held[grp] += Held[u]
			group_Held_procs[grp] += Held_procs[u]
		}
	}
	if (userselect > 0) exit	# Finished (username specified)

	# Group info format string
	groupfmt = "Running+Idle=%d CPUs %d users"
	for (grp in grouplist) {
		groupinfo = sprintf(groupfmt, group_runprocs[grp]+group_idleprocs[grp], groupusers[grp])
		if (reason_print == 0)
			printf(fmt, maxlength, maxlength,
			"GROUP_TOTAL", group_running[grp], group_runprocs[grp], group_idle[grp], group_idleprocs[grp],
			grp, groupinfo)
		else
			printf(reasonfmt, maxlength, maxlength,
			"GROUP_TOTAL", group_running[grp], group_runprocs[grp], group_idle[grp], group_idleprocs[grp],
			group_Priority[grp], group_Priority_procs[grp], group_Dependency[grp], group_Dependency_procs[grp],
			group_CpuLimit[grp], group_CpuLimit_procs[grp], group_Held[grp], group_Held_procs[grp],
			grp, groupinfo)
	}
	if (groupselect > 0) exit	# Finished (groupname specified)

	groupinfo = sprintf(groupfmt, totalrunprocs+totalidleprocs, totalusers)
	if (reason_print == 0)
		printf(fmt, maxlength, maxlength,
		"GRAND_TOTAL", totalrun, totalrunprocs, totalidle, totalidleprocs, 
		"ALL", groupinfo)
	else
		printf(reasonfmt, maxlength, maxlength,
		"GRAND_TOTAL", totalrun, totalrunprocs, totalidle, totalidleprocs, 
		totalPriority, totalPriority_procs, totalDependency, totalDependency_procs,
		totalCpuLimit, totalCpuLimit_procs, totalHeld, totalHeld_procs,
		"ALL", groupinfo)
}' | env LC_ALL=C sort -r -n -k 3 -k 5 -k 1d

# The sort command sorts number of running procs in descending order on keys 3,5 and alphabetical sort on key 1
# The LC_ALL=C ensures that Upper case is sorted before lower case.
