#!/usr/bin/env bash

# Show Slurm user limits
# Homepage: https://github.com/OleHolmNielsen/Slurm_tools/

#
# Command usage:
#
function usage()
{
        cat <<EOF
Usage: $0 [-u username [-A account] [-l limit [-s sub-limit]] | -h ]
where:
        -u username: Print only user <username> 
        -A accountname: Print only account <accountname>
        -p partition: Print only Slurm partition <partition>
        -l Print selected limits only
        -s Print selected sub-limits only
        -h Print help information
EOF
}

# Default: Current user
username="$USER"

#
# Parse command options
#
while getopts "u:A:p:l:s:h" options; do
	case $options in
		u ) username=$OPTARG	# Select user
	    	;;
		A ) account=$OPTARG	# Select account
	    	;;
		p ) export partition=$OPTARG	# Select partition
	    	;;
		l ) export limits=$OPTARG	# Select limits to display
	    	;;
		s ) export sublimits=$OPTARG	# Select sublimits to display
	    	;;
		h|*|? ) usage
	    	exit 1;;
	esac
done

# Default account if none was specified
if test -z "$account"
then
	account=`sacctmgr -nrp show user $username | awk -F'|' '{print $2}'`
fi

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

# Get Current Association Manager state Association Records
scontrol -o show assoc_mgr users=$username account=$account flags=assoc | awk '
BEGIN {
	partition = ENVIRON["partition"]
	limits = ENVIRON["limits"]
	sublimits = ENVIRON["sublimits"]
}
function split_parenthesis (string, array) {
	# Split strings of the form aaa(bbb)
	n = split(string,array,"(")
	if (n <= 1) return 0	# No ( found
	if (array[1] == "N") array[1] = "None"		# Value N means None
	gsub(")","",array[2])	# Remove trailing )
	return 1
}
{
	# Read ClusterName lines
	split($1,a,"=")
	if (a[1] != "ClusterName") next
	# Guess at parent/user association records
	if (NR == 3)
		print "Association (Parent account):"
	else if (NR == 4)
		print "Association (User):"
	else
		print "Association:"

	# Loop over association records
	for (i=1; i<=NF; i++) {	
		n = split($i,a,"=")
		rec = a[1]
		printok = 0
		if (limits=="" || limits==rec) printok = 1
		if (rec=="ClusterName" || rec=="Account" || rec=="UserName" || rec=="Partition") printok = 1
		if (n >= 2) {
			v = a[2]
			if (rec=="UserName" && v == "")		# Empty UserName
				v = "None(Parent account)"
			else if (rec=="Partition") {		# Handle partition selection
				if (v == "")			# Empty partition = any partition
					v = "None(Any partition)"
				else if (v != partition)
					next	# partition not selected, skip to next record 
			}
			if (printok) printf("\t%13s = ", rec)		# Record
			if (n == 2) {
				m = split_parenthesis(v, array)
				if (m == 0) {
					if (printok) printf("\t%s", v)	# Value
				} else {
					if (printok) printf("\t%s, current value or id = %s", array[1], array[2])	# Values
				}
			} else if (n >= 3) {	# Extra value fields
				if (printok) printf("\n")
				gsub(rec "=","",$i)		# Remove leading rec= from string
				m = split($i,b,",")		# Comma-separated sub-fields
				for (j=1; j<=m; j++) {
					split(b[j],c,"=")	# Sub value=field
					# Value c[2] sub-field consists of Limit(Value) pairs
					split_parenthesis(c[2], array)
					if (sublimits == "") {
						if (printok)
							printf("\t\t%8s:\tLimit = %s, current value = %s\n", c[1], array[1], array[2])
					} else {
						if (printok && c[1] == sublimits)
							printf("\t\t%8s:\tLimit = %s, current value = %s\n", c[1], array[1], array[2])
					}
				}
			}
		}
		if (printok) printf("\n")
	}
}'
