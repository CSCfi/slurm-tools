#!/bin/bash

# Prints a Slurm cluster status with 1 line per node/partition and job info
# Author: Ole.H.Nielsen@fysik.dtu.dk

# URL: ftp://ftp.fysik.dtu.dk/pub/Slurm/pestat
VERSION="pestat version 0.32. Date: 03 May 2017"

# Command usage:
function usage()
{
	cat <<EOF
Usage: pestat [-p partition(s)] [-u username] [-q qoslist] [-f] [-V] [-h]
where:
	-p partition: Select only partion <partition>
	-u username: Print only user <username> 
	-q qoslist: Print only QOS in the qoslist <qoslist>
	-s statelist: Print only nodes with state in <statelist> 
	-f: Print only nodes that are flagged by * (unexpected load etc.)
	-h: Print this help information
	-V: Version information
EOF
}

# Colors may be used in the output (also controlled by the PESTAT_COLOR environment variable).
# Colored output by default:
colors=1
# Print all nodes by default
printallnodes=0

export PARTITION=""

while getopts "p:u:q:s:hVf" options; do
	case $options in
		p )	export PARTITION="-p $OPTARG"
			echo Print only nodes in partition $OPTARG
			;;
		u )	username=$OPTARG
			if test "`/usr/bin/sacctmgr -p -n show assoc where users=$username`"
			then
				echo Select only user $username
			else
				echo Error selecting Slurm username $username 
				exit -1
			fi
			;;
		q )	qoslist=$OPTARG
			if test "`/usr/bin/sacctmgr -n -p show qos $qoslist`"
			then
				echo Select only QOS=$qoslist
			else
				echo Error selecting QOS $qoslist
				echo Print all available QOSes by: sacctmgr show qos
				exit -1
			fi
			;;
		s )	STATELIST="--states $OPTARG"
			echo Select only nodes with state=$OPTARG
			;;
		f )	printallnodes=1
			echo Print only nodes that are flagged by \*
			;;
		V ) echo $VERSION
			exit 1;;
		h|? ) usage
			exit 1;;
		* ) usage
			exit 1;;
	esac
done

# Test for extraneous command line arguments
if test $# -gt $(($OPTIND-1))
then
	echo ERROR: Too many command line arguments: $*
	usage
	exit 1
fi

# Check user environment variable PESTAT_COLOR for color
if test "$PESTAT_COLOR" = "0"
then
	colors=0
fi

# Check if output is NOT a terminal: Turn colors off (can be overruled by "-c" flag).
FD=1	# File Descriptor no. 1 = stdout
if test ! -t $FD
then
	colors=0
fi

# Print all nodes: NODELIST PARTITION CPU CPU_LOAD MEMORY STATE
/usr/bin/sinfo -h -N $PARTITION $STATELIST -o "%N %P %C %O %m %t" | \
	awk -v username=$username -v qoslist=$qoslist -v printallnodes=$printallnodes  -v colors=$colors '
BEGIN {
	# Define terminal colors for the output if requested
	if (colors != 0) {
		# See http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
		RED="\033[1;4;31m"
		GREEN="\033[1;32m"
		MAGENTA="\033[1;35m"
		NORMAL="\033[0m"
	}

	if (username != "") selection = " -u " username
	if (qoslist != "") selection = selection " -q " qoslist
	# The "scontrol show hostnames" command is used to expand NodeList expressions
	HOSTLIST="scontrol show hostnames "
	# Gather the list of running jobs
	# Running jobs: JobState JobId User NodeList
	JOBLIST = "/usr/bin/squeue -h -o \"%T %A %u %N\" " selection
	while ((JOBLIST | getline) > 0) {
		JobState=$1
		# Skip jobs if not in RUNNING state
		if (JobState != "RUNNING") continue
		JobId=$2
		User=$3
		NodeList=$4
		# Create the list of nodes for this job, expand the list if necessary
		if (index(NodeList,"[") == 0) {
			jobnodes[1] = NodeList
		} else {
			# Expand NodeList hostnames, edit them into a single line using "paste"
			cmd = HOSTLIST NodeList "| paste -s -d ,"
			cmd | getline exp_list
			close (cmd)
			split(exp_list, jobnodes, ",")
		}
		# Populate the node arrays with "JobId User" (multiple jobs may exist)
		for (i in jobnodes) {
			n = jobnodes[i]
			hostname[n] = n
			jobs[n] = jobs[n] JobId " " User " "
			numjobs[n]++
		}
		delete jobnodes
	}
	close (JOBLIST)
	# Print a header line
	printf("%8s %15s %8s %7s %7s %8s %s\n", "Hostname", "Partition", "Node", "Num_CPU", "CPUload", "Memsize", "Joblist")
	printf("%8s %15s %8s %7s %7s %8s %s\n", "", "", "State", "Use/Tot", "", "(MB)", "JobId User ...")
}
{
	node=$1
	# Selection of subset of nodes
	if (selection != "" && jobs[node]=="") next
	partition=$2
	# sinfo -o %C gives number of CPUs by state in the format "allocated/idle/other/total"
	split($3,cpulist,"/")
	cpuload=$4
	memory=$5
	state=$6

	if (printallnodes == 0) {
		listnode=1	# Print all nodes
	} else {
		listnode=0	# Only selected nodes are printed
		if (state == "drain" || state == "drng" || state == "resv" || state == "down" || state == "error") {
			# Flag nodes with status down, drain etc.
			stateflag="*"
			statecolor=RED
			listnode++
		} else {
			stateflag=" "
			statecolor=NORMAL
		}
		# Flag unexpected CPU load average
		loaddiff = cpuload - cpulist[1]
		if (loaddiff > 2 || loaddiff < -2) {
			loadflag="*"
			loadcolor=RED
			cpucolor=GREEN
			listnode++
		} else if (loaddiff > 0.5 || loaddiff < -0.5) {
			loadflag="*"
			loadcolor=MAGENTA
			cpucolor=GREEN
			listnode++
		} else {
			loadflag=" "
			loadcolor=NORMAL
			cpucolor=NORMAL
		}
 		# Flag unexpected number of jobs
		if (numjobs[node] > cpulist[1]) {	# Should be at least 1 task per job
			jobflag="*"
			jobcolor=RED
			listnode++
		} else {
			jobflag=" "
			jobcolor=NORMAL
		}
	}

	# Was:
	# printf("%8s %15s %8s %3d %3d %7.2f %8d %s\n", node, partition, state, cpulist[1], cpulist[4], cpuload, memory, jobs[node])
	if (listnode > 0) {
		printf("%8s %15s ", node, partition)
		printf("%s%8s%1s%s", statecolor, state, stateflag, NORMAL)
		printf("%s%3d%s %3d ", cpucolor, cpulist[1], NORMAL, cpulist[4])
		printf("%s%7.2f%1s%s ", loadcolor, cpuload, loadflag, NORMAL)
		printf("%8d ", memory)
		printf("%s%s%1s%s", jobcolor, jobs[node], jobflag, NORMAL)
		printf("\n")
	}
	delete cpulist
}'
